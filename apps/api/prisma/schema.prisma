// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication model
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  passwordHash   String?   @map("password_hash")
  socialProvider String?   @map("social_provider") // 'google', 'facebook', null for email
  socialId       String?   @map("social_id")
  emailVerified  Boolean   @default(false) @map("email_verified")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  profile        UserProfile?
  refreshTokens  RefreshToken[]
  savedLocations UserSavedLocation[]

  @@map("users")
}

// User profile with exploration preferences
model UserProfile {
  id                  String    @id @default(uuid())
  userId              String    @unique @map("user_id")
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  currentLocation     Json?     @map("current_location") // {country, city, coordinates}
  targetCountries     String[]  @map("target_countries") // Array of country names
  explorationTimeline String?   @map("exploration_timeline") // '1-3 months', '3-6 months', etc.
  userType            String?   @map("user_type") // 'relocation_explorer', 'weekend_traveler', 'outdoor_adventurer'
  interests           Json?     // {work: [], lifestyle: [], climate: []}
  privacySettings     Json?     @map("privacy_settings") // {profile_visible: boolean, location_visible: boolean}
  bio                 String?   @db.Text
  avatarUrl           String?   @map("avatar_url")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Refresh token model for JWT rotation
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// Email verification tokens
model EmailVerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@map("email_verification_tokens")
}

// Password reset tokens
model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@map("password_reset_tokens")
}

// Locations master table (normalized location data)
model Location {
  id         String   @id @default(uuid())
  placeId    String   @unique @map("place_id") // Mapbox/Google Places ID
  name       String
  address    String?
  country    String?  @db.VarChar(100)
  region     String?  @db.VarChar(100)
  city       String?  @db.VarChar(100)
  latitude   Float
  longitude  Float
  placeType  String?  @map("place_type") @db.VarChar(50) // 'city', 'region', 'poi', 'address'
  metadata   Json?    // Additional place data from APIs
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  savedByUsers UserSavedLocation[]

  @@index([country, city])
  @@index([latitude, longitude])
  @@map("locations")
}

// User saved locations (wishlist)
model UserSavedLocation {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  locationId    String   @map("location_id")
  personalNotes String?  @map("personal_notes") @db.Text
  customTags    String[] @map("custom_tags")
  rating        Int?     @db.SmallInt
  isFavorite    Boolean  @default(false) @map("is_favorite")
  savedAt       DateTime @default(now()) @map("saved_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([userId])
  @@index([customTags])
  @@map("user_saved_locations")
}